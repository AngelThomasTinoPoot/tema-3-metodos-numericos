#**MÃ©todo de Jacobi**
#${x_i^k} = T*x_{k-1} + c$


import numpy as np

from math import*

#Definimos la matriz T
T = np.array([[0,1/3,-1/3],[-3/6,0,-2/6],[-3/7,-3/7,0]])
c = np.array([1/3,0,4/7])
x = np.array([0,0,0]) #vector de valores iniciales
erroraceptado=0.01


print(T.shape)
print(c.shape)
error=1
while error>0.01:
    resultado=np.dot(T,x) + c
    print(resultado)
    numerador = np.amax( abs((resultado - x)))
    denominador = np.amax( abs(resultado))
    error = numerador/denominador
    x=resultado
    
    
    
    
    
    #**METODO DE NEWTON**
def jacobiano(x):
    J = np.array([[4*pi*x[1]*cos(4*pi*x[0]*x[1])-1,4*pi*x[1]*cos(4*pi*x[0]*x[1])-2],[(((4*pi*e**2*x[0])-(e**2*x[0]))/2*pi)-2*e,8*e*x[1]]])
    JInversa = np.linalg.inv(J)
    return JInversa

def Fx(x):  
    x1 = sin(4*pi*x[0]*x[1])-2*x[1]-x[0]
    x2 = ((4*pi-1)/(4*pi))*(e**2*x[0]-e)+4*e*x[1]**2-2*e*x[0] 
          
    xk = np.array([x1,x2])
    return xk

    x = np.array([0,0]) #vector de valores iniciales
error = 1
c=0

maxiter=int(input("introduxca numero de iteraciones"))
iteraciones=0
while error>0.01 and iteraciones<maxiter:
    iteraciones+=1
    c+=1
    r= jacobiano(x)
    feval = Fx(x)
    resultado =x- np.dot(r,feval)
    
    numerador = np.amax( abs((resultado - x)))
    denominador = np.amax( abs(resultado))
    error = numerador/denominador
    x=resultado
    
    print("IteraciÃ³n:",c," Resultado ",resultado)
